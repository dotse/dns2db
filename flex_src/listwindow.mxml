<?xml version="1.0" encoding="utf-8"?>
<!-- $Id$  -->


<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
	close="fadeOut.play([this]);"
	creationComplete="TimerStart();"
	layout="vertical" 
	width="370" height="366"
	title="loading, please wait..."
	showCloseButton="true"
	resizeEffect="resizeEffect"
	horizontalScrollPolicy="off"
	verticalScrollPolicy="off"
	keyDown="windowKeyPress(event)"
	doubleClickEnabled="true"
	x="300"
	y="100"
	doubleClick="windowDoubleClick(event);">

<mx:Resize heightFrom="366" heightTo="30" id="windowResizeEffect1" duration="500"/>
<mx:Resize heightFrom="366" heightTo="0" id="resizeEffect1" duration="500"/>
<mx:Resize heightFrom="0" heightTo="66" id="resizeEffect2" duration="200"/>
<mx:Fade id="fade" alphaFrom="0" alphaTo="1" duration="500" /> 
<mx:Blur id="blur" blurXTo="10" blurYTo="10" blurXFrom="0" blurYFrom="0" duration="500" /> 
<mx:Fade id="fadeOut" alphaTo="0" duration="500" effectStart="{resizeEffect1.play([this]); blur.play([this])}" effectEnd="{PopUpManager.removePopUp(this);}"/>

<mx:HTTPService 
   id="serverRequest" 
   fault="serverRequest.clearResult(true);"
   useProxy="false" 
   concurrency="single"
   requestTimeout="45"
   showBusyCursor="true"
   result="resultHandler(event)"/>

<mx:HTTPService 
   id="lookupRequest" 
   fault="lookupRequest.clearResult(true);"
   useProxy="false" 
   concurrency="multiple"
   requestTimeout="10"
   showBusyCursor="false"
   result="lookupHandler(event)"/>

<mx:Script>
    <![CDATA[
	import mx.collections.ArrayCollection;
	import mx.utils.ArrayUtil;
	import mx.rpc.events.ResultEvent;
	import mx.events.ListEvent;
	import mx.collections.Sort;
    import mx.collections.SortField;
    import mx.managers.PopUpManager;
    import mx.utils.StringUtil;
	
	public var vert:int = 0;
	public var sort:Sort = null;
	public var sel:String = null;
    public var functionString:String = null;
    public var parameter:String = null;
	public var winTitle:String = '';
	public var server:Boolean = false;
    public var interval:Interval = new Interval(null,0,0);
    public var touch_count:int = -1;
    public var servers_touch_count:int = -1;
	private var expcontant:Number = 0.00000007;
    private var intervalText:String;
    private var expandedTitle:String;
    private var previousRequests:Array = new Array();

	[Bindable]
	private var myData:ArrayCollection;

	[Bindable]
	private var colTitle:String = "";

    [Bindable]
    private var countTitle:String = "Load (q/m)";
                
	private function resultHandler(event:ResultEvent):void {
		if (serverRequest.lastResult.items != null) {
		    var server:* = serverRequest.lastResult.items.status.node;
			var dd:Boolean = server is ArrayCollection;
			if (dd) 
			{
		        parentApplication.serverwin.setStatus(title,7)
			    var it:int;
                for( it = 0; it < server.length; ++it )
                {
                    parentApplication.serverwin.setStatus(server[it].name,server[it].result);
                }
			} 
			else 
			{
                parentApplication.serverwin.setStatus(server.name,server.result);
            }

			dd = serverRequest.lastResult.items.item is ArrayCollection;
			if (dd) {
				myData = serverRequest.lastResult.items.item;
			} else {
				myData = new ArrayCollection([{ position:    serverRequest.lastResult.items.item.position, 
				                                qcount:      serverRequest.lastResult.items.item.qcount, 
				                                domain:      serverRequest.lastResult.items.item.domain, 
				                                displaytext: serverRequest.lastResult.items.item.displaytext}]);
			}
			
			if (sort != null) {
				myData.sort = sort;
	        	myData.refresh();
			}
                            
           title = functionString;
           var i:int;

           if (functionString == "topdomains") {
				title = "Top domains for " + idate.selectedDate.fullYear + "-" + doubleDigits(idate.selectedDate.month+1) + "-" + doubleDigits(idate.selectedDate.date) + " " + doubleDigits(int(hCombo.selectedItem)) + ":" + doubleDigits(int(mCombo.selectedItem));
				colTitle = "Domain";
           } else if (functionString == "topresolvers") {
                title = "Top servers for " + idate.selectedDate.fullYear + "-" + doubleDigits(idate.selectedDate.month+1) + "-" + doubleDigits(idate.selectedDate.date) + " " + doubleDigits(int(hCombo.selectedItem)) + ":" + doubleDigits(int(mCombo.selectedItem));
                colTitle = "Server";
           } else if (functionString == "topresolveranddomain") {
                title = "Top repeating resolvers for " + idate.selectedDate.fullYear + "-" + doubleDigits(idate.selectedDate.month+1) + "-" + doubleDigits(idate.selectedDate.date) + " " + doubleDigits(int(hCombo.selectedItem)) + ":" + doubleDigits(int(mCombo.selectedItem));
                colTitle = "Resolver (query & type)";
                countTitle = "Count";
           } else if (functionString == "toprrtypes") {
                title = "Top rr types for " + idate.selectedDate.fullYear + "-" + doubleDigits(idate.selectedDate.month+1) + "-" + doubleDigits(idate.selectedDate.date) + " " + doubleDigits(int(hCombo.selectedItem)) + ":" + doubleDigits(int(mCombo.selectedItem));
                colTitle = "RR Type";
                countTitle = "Q Count";
                var total:int = 0;
		        for( i = 0; i < myData.length; ++i ) {
			        total += myData[i].qcount;
		        }
		        for( i = 0; i < myData.length; ++i ) {
			        myData[i].total = myData[i].qcount + " of " + total;
			        myData[i].percentage = Number(100 * myData[i].qcount/total).toFixed(1);
		        }
           } else if (functionString == "resolversfordomain") {
                title = "Servers asking about " + ((winTitle == "") ? parameter : winTitle) + " - " + idate.selectedDate.fullYear + "-" + doubleDigits(idate.selectedDate.month+1) + "-" + doubleDigits(idate.selectedDate.date) + " " + doubleDigits(int(hCombo.selectedItem)) + ":" + doubleDigits(int(mCombo.selectedItem));
                colTitle = "Server"; 
           } else if (functionString == "domainforresolver") {
                title = "Queries from " + ((winTitle == "") ? parameter : winTitle) + " - " + idate.selectedDate.fullYear + "-" + doubleDigits(idate.selectedDate.month+1) + "-" + doubleDigits(idate.selectedDate.date) + " " + doubleDigits(int(hCombo.selectedItem)) + ":" + doubleDigits(int(mCombo.selectedItem));
                colTitle = "Query";
			}

			for( i = 0; i < myData.length; ++i ) {
				if (myData[i].domain == sel) { serverGrid.selectedIndex = i; }
			}

         if ((functionString == "topresolvers") ||(functionString == "resolversfordomain"))
         {
          for( i = 0; i < myData.length; ++i ) {
                 if ( myData[i].displaytext.length()< 2)
                     myData[i].displaytext=myData[i].domain; 
             }
         }
         myData.refresh();
         serverGrid.verticalScrollPosition = vert;

         // investigate why this fails for topresolvers
         myData.filterFunction = filterListItem;
         myData.refresh();

        } else {
            myData = null;
            if (functionString == null) {
                title = "No data for " + idate.selectedDate.fullYear + "-" + doubleDigits(idate.selectedDate.month+1) + "-" + doubleDigits(idate.selectedDate.date) + " " + doubleDigits(int(hCombo.selectedItem)) + ":" + doubleDigits(int(mCombo.selectedItem));
            } else {
            if (!server) { 
                title = "Servers asking about " + ((winTitle == "") ? functionString : winTitle) + " - " + idate.selectedDate.fullYear + "-" + doubleDigits(idate.selectedDate.month+1) + "-" + doubleDigits(idate.selectedDate.date) + " " + doubleDigits(int(hCombo.selectedItem)) + ":" + doubleDigits(int(mCombo.selectedItem));
                colTitle = "Server"; 
            } else {
                title = "Queries from " + ((winTitle == "") ? functionString : winTitle) + " - " + idate.selectedDate.fullYear + "-" + doubleDigits(idate.selectedDate.month+1) + "-" + doubleDigits(idate.selectedDate.date) + " " + doubleDigits(int(hCombo.selectedItem)) + ":" + doubleDigits(int(mCombo.selectedItem));
                colTitle = "Query";
            }
//              title = functionString + " - no data for " + idate.selectedDate.fullYear + "-" + doubleDigits(idate.selectedDate.month+1) + "-" + doubleDigits(idate.selectedDate.date) + " " + doubleDigits(int(hCombo.selectedItem)) + ":" + doubleDigits(int(mCombo.selectedItem));
            }
		}


	}
	


    private function lookupHandler(event:ResultEvent):void {

        if (lookupRequest.lastResult.lookup != null) {
            var dd:Boolean = lookupRequest.lastResult.lookup is ArrayCollection;

            var name:String = lookupRequest.lastResult.lookup.name;
            var ip:String = lookupRequest.lastResult.lookup.ip;
            //title =  name + " = " + ip;

            for( var i:int = 0; i < myData.length; ++i ) {
                var str:String = myData[i].domain.split(' ')[0];
                if (str == ip) 
                {
                   
                    //title= myData[i].domain;
                    myData[i].displaytext = name+" "+myData[i].domain.substr(str.length+1)+" "; 
                }
            }
            myData.refresh();
       }
    }


    private function doubleDigits(val:int): String
    {
        if (val > 9) {return String(val)} else {return "0" + String(val)}
    }


    public function TimerStart():void {
        
        var nodesw:int = 100;
        var winw:int = this.width+10;

        if (functionString == "topdomains")     { x = nodesw; y = 70; showCloseButton=false; }
        if (functionString == "topresolvers")   { x = nodesw+winw; y = 70; showCloseButton=false; }
        if (functionString == "toprrtypes")     { 
            x = nodesw+winw*2; y = 70; showCloseButton=false; 
            title="Expand to see rr types";
            this.height=30;
            filterText.visible=false;
            listCount.visible=false;  

            var cols:Array = serverGrid.columns;
            var newcols:Array;

            // add a percentage column            
            var dgc:DataGridColumn = new DataGridColumn("%");
            dgc.width = 35;
            dgc.dataField = "percentage";
            dgc.dataTipField = "total";
            dgc.showDataTips = true;
            dgc.setStyle("textAlign","right");
            dgc.itemRenderer=new ClassFactory(BackgroundColorRenderer);
            cols[3]=cols[2];
            cols[2]=dgc;
            serverGrid.columns = cols;

        }
        if (functionString == "topresolveranddomain")     { 
            x = nodesw+winw*2; y = 10; showCloseButton=false; 
            title="Expand to see top repeating resolvers";
            this.height=30;
            filterText.visible=false;
//            listCount.visible=false;  

            cols = serverGrid.columns;
            
            cols[1].width=42;

            // add a percentage column            
//            dgc:DataGridColumn = new DataGridColumn("%");
//            dgc.width = 35;
//            dgc.dataField = "percentage";
//            dgc.dataTipField = "total";
//            dgc.showDataTips = true;
//            dgc.setStyle("textAlign","right");
//            dgc.itemRenderer=new ClassFactory(BackgroundColorRenderer);
//            cols[3]=cols[2];
//            cols[2]=dgc;
//            serverGrid.columns = cols;

        }

        fade.play([this]);

        if (interval.Datum != null) {
            idate.selectedDate = interval.Datum;
            mCombo.selectedIndex = interval.MTid;
            hCombo.selectedIndex = interval.HTid;
        } else {
            var date:Date = new Date();
            var offsetMilliseconds:Number = (date.getTimezoneOffset() -6 )* 60 * 1000;
            date.setTime(date.getTime() + offsetMilliseconds);
            var hourV:int = date.hours;
            var minV:int = date.minutes;
            idate.selectedDate = date;
            mCombo.selectedIndex = (minV/5);
            hCombo.selectedIndex = hourV;
        }
        update();

        var myTimer:Timer = new Timer(100, 0);
        myTimer.addEventListener("timer", timerHandler);
        myTimer.start();
    }

    public function filterListItem(item:Object):Boolean {
        if ((item.displaytext.indexOf(filterText.text) > -1)) {
                return true;
        } else {
                return false;
        }
    }

    public function timerHandler(event:TimerEvent):void 
    {
        if (height < 50) 
              return;

        var d:Date = new Date();
        d.getTime();
        if ( previousRequests.length > 0 )
        {
            var diff:int = previousRequests[0] - d.getTime() + 2000;
            if (diff < 0)
                previousRequests.shift();
        }

        if ((touch_count != interval.touch_count) || (servers_touch_count != parentApplication.serversTouch))
        {
            if ( previousRequests.length > 1 )
                return;

            
            previousRequests.push(d.getTime());
    
        
            serverRequest.cancel();
            myData = new ArrayCollection();
            idate.selectedDate = interval.Datum;
            mCombo.selectedIndex = interval.MTid;
            hCombo.selectedIndex = interval.HTid;
            touch_count = interval.touch_count;
            servers_touch_count = parentApplication.serversTouch;

            serverGrid.horizontalScrollPosition = 0;
            vert = serverGrid.verticalScrollPosition;
            if (serverGrid.selectedItem != null) {sel = serverGrid.selectedItem.domain;}

            if ( myData != null) { sort = myData.sort };

            serverRequest.url =  parentApplication.scriptUrl + "?function=" + functionString;
            serverRequest.url += "&day=" + idate.selectedDate.fullYear + "";
            serverRequest.url += doubleDigits(idate.selectedDate.month+1) + doubleDigits(idate.selectedDate.date);
            serverRequest.url += "&time=" + doubleDigits(int(hCombo.selectedItem)) + "" + doubleDigits(int(mCombo.selectedItem));
            serverRequest.url += "&count=" + listCount.text;
            serverRequest.url += parentApplication.servers;
            serverRequest.url += parentApplication.filterstring;

            if (functionString=="resolversfordomain")
                serverRequest.url += "&domain=" + escape(StringUtil.trim(parameter));
            if (functionString=="domainforresolver")
                serverRequest.url += "&resolver=" + escape(StringUtil.trim(parameter));

            serverRequest.url +=  "&rand=" + Math.random();
            serverRequest.send();
            //title=serverRequest.url;
            title = "loading, please wait....";
        }

        if ((functionString == "topresolvers")||(functionString == "resolversfordomain")||(functionString == "topresolveranddomain"))
        {
            var cnt:int = 0;
            for( var i:int = 0; i < myData.length; ++i ) {
                if (myData[i].domain == myData[i].displaytext) 
                {
                    var lookup:String = myData[i].domain.split('(')[0];
                    //title = lookup;
                    myData[i].displaytext = myData[i].displaytext+" "; 
                    lookupRequest.url=parentApplication.scriptUrl + "?function=lookup&lookup=" + lookup;
                    lookupRequest.send();
                    if (cnt>0)
                        break;
                    else
                        cnt++;
                }
            }
        }
    }

    public function update():void {
        interval.Datum = idate.selectedDate;
        interval.MTid = mCombo.selectedIndex;
        interval.HTid = hCombo.selectedIndex;
        interval.touch();
  	}

    private function windowDoubleClick(event: MouseEvent):void {
	    if ((event.stageY-y) < 30) {
            windowResizeEffect1.heightFrom = 366;

            if (height < 50) {
                title=expandedTitle;
                windowResizeEffect1.play([this],true);
            } else {
                expandedTitle=title;
                if (functionString == "topdomains") { title="Expand to see topdomains"; }
                else if (functionString == "topresolvers") { title="Expand to see topresolvers"; }
                else if (functionString == "toprrtypes") { title="Expand to see rr types"; }
                else {  title="Expand to see "+functionString; }
                windowResizeEffect1.play([this],false);
            }
	    }
    }
	
    private function windowKeyPress(event:KeyboardEvent):void {

        if (event.ctrlKey) {
            switch(event.keyCode) {
                case 37: // Left
                    idate.selectedDate = new Date(idate.selectedDate.valueOf()-(1000*60*60*24));
                    update();

                    break;
                case 39: // Right
                    idate.selectedDate = new Date(idate.selectedDate.valueOf()+(1000*60*60*24));
                    update();
                    break;
		        }
            } else {
        if (event.shiftKey) {
            switch(event.keyCode) {
                case 37: // Left
                    if (hCombo.selectedIndex == 0) {
                        idate.selectedDate = new Date(idate.selectedDate.valueOf()-(1000*60*60*24));
                        hCombo.selectedIndex = 23;
                    } else {
                        hCombo.selectedIndex -= 1;
                    }
                    update();

                    break;
                case 39: // Right
	                if (hCombo.selectedIndex == 23) {
	                	idate.selectedDate = new Date(idate.selectedDate.valueOf()+(1000*60*60*24));
		              	hCombo.selectedIndex = 0;
		            } else {
		              	hCombo.selectedIndex += 1;
		            }
	              update();
	              break;
		        }
            } else {
            switch(event.keyCode) {
                case 37: // Left
                    if (mCombo.selectedIndex == 0) {
                        if (hCombo.selectedIndex == 0) {
                            idate.selectedDate = new Date(idate.selectedDate.valueOf()-(1000*60*60*24));
                            hCombo.selectedIndex = 23;
                            mCombo.selectedIndex = 11;
                        } else {
                            hCombo.selectedIndex -= 1;
                            mCombo.selectedIndex = 11;
                        }
                    } else {
                        mCombo.selectedIndex -= 1;
                    }
                    update();

                    break;
                case 39: // Right
                    if (mCombo.selectedIndex == 11) {
                        if (hCombo.selectedIndex == 23) {
                            idate.selectedDate = new Date(idate.selectedDate.valueOf()+(1000*60*60*24));
                            hCombo.selectedIndex = 0;
                            mCombo.selectedIndex = 0;
                        } else {
                            hCombo.selectedIndex += 1;
                            mCombo.selectedIndex = 0;
                        }
                    } else {
                       mCombo.selectedIndex += 1;
                    }
	                update();
                break;
                }
            }
        }
    }

	private function dataGridClick(event:ListEvent):void {
		if (event.itemRenderer.data.hasOwnProperty("domain")) {
			var val:Boolean;
            if (functionString == "toprrtypes") 
                return;
            var func:String="domainforresolver";
            if (functionString == "topdomains") {
                func = "resolversfordomain";
            } 
            if (functionString == "domainforresolver") {
                func = "resolversfordomain";
            } 
            if (functionString == "topresolveranddomain") {
                return;
            } 

			var dd:String = "";
			if (val) { dd = event.itemRenderer.data.displaytext; }
                            
            var iv:Interval = new Interval (idate.selectedDate, hCombo.selectedIndex, mCombo.selectedIndex);
            parentApplication.openWindow(func, iv , dd, event.itemRenderer.data.domain);
		}
	}

    private function copyToClipBoard(event:ListEvent):void {
	    System.setClipboard(event.itemRenderer.data.displaytext);
    }


    private function cloneWin(event:MouseEvent):void {
         parentApplication.openWindow(functionString, idate.selectedDate, hCombo.value, mCombo.selectedIndex, server, "");
    }


		]]>
	</mx:Script>
	<mx:HBox keyDown="windowKeyPress(event)" id="optionhbox1" horizontalScrollPolicy="off" verticalScrollPolicy="off" horizontalAlign="center" verticalAlign="middle">
	    <mx:DateField id="idate" change="update()" formatString="YYYY-MM-DD" disabledRanges="{[ {rangeStart: new Date()} ]}"/>
		<mx:ComboBox keyDown="windowKeyPress(event)" rowCount="15" id="hCombo" change="update()" width="54">
            <mx:dataProvider>
               <mx:Array>
                  <mx:String>00</mx:String>
                  <mx:String>01</mx:String>
                  <mx:String>02</mx:String>
                  <mx:String>03</mx:String>
                  <mx:String>04</mx:String>
                  <mx:String>05</mx:String>
                  <mx:String>06</mx:String>
                  <mx:String>07</mx:String>
                  <mx:String>08</mx:String>
                  <mx:String>09</mx:String>
                  <mx:String>10</mx:String>
                  <mx:String>11</mx:String>
                  <mx:String>12</mx:String>
                  <mx:String>13</mx:String>
                  <mx:String>14</mx:String>
                  <mx:String>15</mx:String>
                  <mx:String>16</mx:String>
                  <mx:String>17</mx:String>
                  <mx:String>18</mx:String>
                  <mx:String>19</mx:String>
                  <mx:String>20</mx:String>
                  <mx:String>21</mx:String>
                  <mx:String>22</mx:String>
                  <mx:String>23</mx:String>
                </mx:Array>
            </mx:dataProvider>				
		</mx:ComboBox>
	
		<mx:ComboBox keyDown="windowKeyPress(event)" rowCount="15" id="mCombo" change="update()" width="54">
            <mx:dataProvider>
               <mx:Array>
                  <mx:String>00</mx:String>
                  <mx:String>05</mx:String>
                  <mx:String>10</mx:String>
                  <mx:String>15</mx:String>
                  <mx:String>20</mx:String>
                  <mx:String>25</mx:String>
                  <mx:String>30</mx:String>
                  <mx:String>35</mx:String>
                  <mx:String>40</mx:String>
                  <mx:String>45</mx:String>
                  <mx:String>50</mx:String>
                  <mx:String>55</mx:String>
                </mx:Array>
            </mx:dataProvider>				
		</mx:ComboBox>
		<mx:TextInput id="filterText" change="{myData.refresh();}" width="55"/>
		<mx:ComboBox id="listCount" change="update()" editable="true" text="20" width="55">
            <mx:dataProvider>
               <mx:Array>
                  <mx:String>20</mx:String>
                  <mx:String>100</mx:String>
                  <mx:String>200</mx:String>
                  <mx:String>500</mx:String>
                  <mx:String>1000</mx:String>
                </mx:Array>
            </mx:dataProvider>
		</mx:ComboBox>
		<mx:Button visible="false" label="Clone" click="cloneWin(event)" width="43"/>
	
	</mx:HBox>

	<mx:DataGrid keyDown="windowKeyPress(event)" id="serverGrid" itemClick="copyToClipBoard(event)" itemDoubleClick="dataGridClick(event);" editable="false" sortableColumns="true" dataProvider="{myData}" horizontalScrollPolicy="auto" verticalScrollPolicy="auto" height="100%" width="100%">
		<mx:columns>
		    <mx:DataGridColumn showDataTips="true" width="33"  headerText="Pos" dataTipField="Position" dataField="position" textAlign="right"/>
            <mx:DataGridColumn showDataTips="true" width="75"  headerText="{countTitle}" dataTipField="Count" dataField="qcount"  textAlign="right"/>
		    <mx:DataGridColumn showDataTips="true" width="145" headerText="{colTitle}" dataTipField="domain" dataField="displaytext"/>
		</mx:columns>
	</mx:DataGrid>
</mx:TitleWindow>
